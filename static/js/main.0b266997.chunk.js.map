{"version":3,"sources":["Components/Spinner.js","Components/Api.js","Components/DropdownCategories.js","Components/SearchBox.js","Components/Constants.js","Components/Navbar.js","Components/MovieItem.js","Components/MoviesGrid.js","Components/MainPage.js","Components/MoviePage.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Spinners","props","isLoading","Spinner","animation","variant","size","constructUrl","path","query","queryText","DropdownCategories","SEARCH_URL_CATEGORIES","useState","categories","setCategories","useEffect","fetch","then","res","json","data","console","log","undefined","genres","id","name","catch","err","Dropdown","style","marginRight","Toggle","category","Menu","length","map","Item","href","key","onSelect","setCategory","SearchBox","setQuery","SEARCH_URL","results","movies","filter","movie","genre_ids","includes","handleMovies","Form","inline","onSubmit","event","preventDefault","setIsLoading","handleQuery","FormControl","type","placeholder","className","onChange","e","target","value","Button","PATH_PREFIX","Navbar1","Navbar","bg","expand","Brand","color","aria-controls","Collapse","Nav","Link","MovieItem","Card","width","Img","src","backdrop_path","Fragment","title","count","vote_average","color2","release_date","MoviesGrid","Container","Row","md","lg","xs","Col","MainPage","MoviePage","setMovie","trailers","setTrailers","actors","setActors","movie_id","match","params","a","videos","trailer","push","cast","actor","baseUrl","nullPhoto","moiveImage","posterImage","poster_path","backgroundImage","backgroundSize","textDecoration","alt","original_title","overview","genre","Badge","marginLeft","url","Footer","icon","faGithub","App","setMovies","exact","process","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0b266997.chunk.js","sourcesContent":["import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nexport default function Spinners(props) {\n  return (\n   <> \n   {props.isLoading && <Spinner animation=\"border\" variant=\"primary\"size=\"sm\"/>}\n   </>\n  );\n}\n"," const TMDB_BASE_URL = `https://api.themoviedb.org/3`;\nconst API_KEY = \"542003918769df50083a13c415bbc602\";\n\nexport  function constructUrl(path, query) {\n  const queryText = query ? `&query=${query}` : \"\";\n  return `${TMDB_BASE_URL}/${path}?api_key=${API_KEY}` + queryText;\n}\n\n\n","import React, { useState, useEffect } from \"react\";\nimport { constructUrl } from \"./Api\";\nimport { Dropdown } from \"react-bootstrap\";\n\nexport default function DropdownCategories(props) {\n  const SEARCH_URL_CATEGORIES = constructUrl(\"genre/movie/list\", \"\");\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    fetch(SEARCH_URL_CATEGORIES)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        if (data.genres !== undefined)\n          setCategories([{ id: 0, name: \"All\" }, ...data.genres]);\n      })\n      .catch((err) => console.log(err));\n  }, [SEARCH_URL_CATEGORIES]);\n\n  return (\n    <>\n      <Dropdown style={{ marginRight: \"5px\" }}>\n        <Dropdown.Toggle variant=\"info\" id=\"dropdown-basic\">\n          {props.category.name || \"Categories\"}\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu>\n          {categories.length > 0 &&\n            categories.map((category) => (\n              <Dropdown.Item\n                href=\"#\"\n                key={category.id}\n                onSelect={() => props.setCategory(category)}\n              >\n                {category.name}\n              </Dropdown.Item>\n            ))}\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Button, Form, FormControl } from \"react-bootstrap\";\nimport Spinners from \"./Spinner\";\nimport DropdownCategories from \"./DropdownCategories\";\nimport { constructUrl } from \"./Api\";\n\nexport default function SearchBox(props) {\n  const [category, setCategory] = useState({});\n\n  const changeCategory = (category) => {\n    console.log(category);\n    props.setIsLoading(true);\n    setCategory(category);\n  };\n  const [query, setQuery] = useState(\"\");\n  const onChange = (e) => {\n    setQuery(e.target.value);\n  };\n  const onSubmit = (event) => {\n    event.preventDefault();\n    props.setIsLoading(true);\n    props.handleQuery(query);\n  };\n\n  useEffect(fetchMovies, [props.isLoading, category]);\n  function fetchMovies() {\n    if (!props.isLoading) return;\n    let SEARCH_URL;\n    if (query !== \"\") {\n      SEARCH_URL = constructUrl(\"search/movie\", query);\n    } else {\n      SEARCH_URL = constructUrl(\"movie/popular\");\n    }\n    fetch(SEARCH_URL)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        if (data.results !== undefined) {\n          let movies = data.results;\n          console.log(movies);\n          if (category.id) {\n            movies = movies.filter((movie) =>\n              movie.genre_ids.includes(category.id)\n            );\n            console.log(movies);\n          }\n          props.handleMovies(movies);\n        }\n      })\n      .catch((err) => console.log(err));\n  }\n\n  return (\n    <Form inline onSubmit={onSubmit}>\n      <DropdownCategories category={category} setCategory={changeCategory} />\n      <FormControl\n        type=\"text\"\n        placeholder=\"Search\"\n        className=\"mr-sm-2\"\n        onChange={onChange}\n      />\n      <Button variant=\"outline-light\" type=\"submit\">\n        Search\n        <span>\n          <Spinners isLoading={props.isLoading} />\n        </span>\n      </Button>\n    </Form>\n  );\n}\n","\n\n\nexport  const PATH_PREFIX=\"/iraq-bc-movies-project-students\";\n","import React from \"react\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport SearchBox from \"./SearchBox\";\nimport {PATH_PREFIX} from './Constants'\n\nexport default function Navbar1(props) {\n  return (\n    <div>\n      <Navbar bg=\"dark\" expand=\"lg\">\n        <Navbar.Brand href={PATH_PREFIX+\"/\"} style={{ color: \"white\" }}>\n          React Movies App\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-Navbar-nav\" />\n        <Navbar.Collapse id=\"basic-Navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href={PATH_PREFIX+\"/\"}  style={{ color: \"white\" }}>\n              Home\n            </Nav.Link>\n          </Nav>\n          <SearchBox\n            handleQuery={props.handleQuery}\n            handleMovies={props.handleMovies}\n            isLoading={props.isLoading}\n            setIsLoading={props.setIsLoading}\n          />\n        </Navbar.Collapse>\n      </Navbar>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport ReactStars from \"react-rating-stars-component\";\nimport {PATH_PREFIX} from './Constants'\n\nexport default function MovieItem(props) {\n  const baseUrl = \"https://image.tmdb.org/t/p/w500/\";\n  const nullPhoto =\n    \"https://image.tmdb.org/t/p/w500/wwemzKWzjKYJFfCeiB57q3r4Bcm.png\";\n\n  return (\n    <a href={`${PATH_PREFIX}/Movie/${props.movie.id}`}>\n      <Card key={props.movie.id} style={{ width: \"100%\" }}>\n        <div className=\"card image\">\n          <Card.Img\n            src={\n              props.movie.backdrop_path !== null\n                ? baseUrl + props.movie.backdrop_path\n                : nullPhoto\n            }\n          />\n          <React.Fragment>\n            <h6 className=\"center datails\">\n              {props.movie.title}\n              <br />\n              <span>\n                Vote Average:{\" \"}\n                <ReactStars\n                  count={10}\n                  value={props.movie.vote_average}\n                  size={14}\n                  color2={\"#ffd700\"}\n                />{\" \"}\n                ({props.movie.vote_average})\n              </span>\n            </h6>\n          </React.Fragment>\n          <div className=\"details\">\n            <div className=\"center\">\n              <p>\n                Released <br />\n                {props.movie.release_date}\n              </p>\n            </div>\n          </div>\n        </div>\n      </Card>\n    </a>\n  );\n}\n","import React from \"react\";\nimport MovieItem from \"./MovieItem\";\nimport Container from \"react-bootstrap/Container\";\nimport { Row, Col } from \"react-bootstrap\";\n\nexport default function MoviesGrid(props) {\n  return (\n    <Container>\n      <Row md={4} lg={3} xs={12}>\n        {props.movies.map((movie) => (\n          <Col key={movie.id}>\n            <MovieItem movie={movie} />\n          </Col>\n        ))}\n      </Row>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport MoviesGrid from \"./MoviesGrid\";\n\nfunction MainPage(props) {\n  return (\n    <React.Fragment>\n      {props.movies.length > 0 && <MoviesGrid movies={props.movies} />}\n    </React.Fragment>\n  );\n}\n\nexport default MainPage;\n","import React, { useState, useEffect } from \"react\";\nimport { constructUrl } from \"./Api\";\nimport { Button, Badge, Container, Col, Row } from \"react-bootstrap\";\nimport ReactPlayer from \"react-player\";\n\nexport default function MoviePage(props) {\n  const [movie, setMovie] = useState(\"\");\n  const [trailers, setTrailers] = useState([]);\n  const [actors, setActors] = useState([]);\n\n  let movie_id = props.match.params.id;\n  let SEARCH_URL;\n\n  useEffect(async () => {\n    SEARCH_URL = constructUrl(`movie/${movie_id}`);\n    let res = await fetch(SEARCH_URL);\n    let data = await res.json();\n    console.log(data);\n\n    setMovie(data);\n  }, [movie_id]);\n\n  useEffect(async () => {\n    SEARCH_URL = constructUrl(`movie/${movie_id}/videos`);\n    let res = await fetch(SEARCH_URL);\n    let data = await res.json();\n    const videos = [];\n    data.results.map((trailer) => {\n      videos.push(`https://www.youtube.com/watch?v=${trailer.key}`);\n    });\n    console.log(videos);\n\n    setTrailers(videos);\n  }, [movie_id]);\n\n  useEffect(async () => {\n    SEARCH_URL = constructUrl(`movie/${movie_id}/credits`);\n\n    let res = await fetch(SEARCH_URL);\n    let data = await res.json();\n    let actors = [];\n    data.cast.map((actor) => {\n      actors.push(actor.name);\n    });\n    setActors(actors);\n  }, [movie_id]);\n\n  const baseUrl = \"https://image.tmdb.org/t/p/w500/\";\n  const nullPhoto =\n    \"https://image.tmdb.org/t/p/w500/wwemzKWzjKYJFfCeiB57q3r4Bcm.png\";\n  const moiveImage =\n    movie.backdrop_path !== null ? baseUrl + movie.backdrop_path : nullPhoto;\n  const posterImage =\n    movie.poster_path !== null ? baseUrl + movie.poster_path : nullPhoto;\n    return (\n      <div style={{backgroundImage:`url(${moiveImage})`,backgroundSize:\"cover\"}}>\n\n        {/* <img\n          alt=\"movieImage\"\n          src={\n            movie.backdrop_path !== null\n              ? baseUrl + movie.backdrop_path\n              : nullPhoto\n          }\n        /> */}\n        <Button variant=\"secondary\">\n          <a\n            href=\"/iraq-bc-movies-project-students/\"\n            style={{ color: \"white\", textDecoration: \"none\" }}\n          >\n            Back\n          </a>\n        </Button>\n        <Container>\n          <Row>\n            <img className=\"col-4\" alt=\"posterImage\" src={posterImage} />\n            <div className=\"col-8 text-white\">\n              <h5>{movie.original_title}</h5>\n  \n              <h5>{movie.release_date}</h5>\n              <h5>{movie.overview}</h5>\n              <h5>{movie.vote_average}</h5>\n  \n              {movie.genres\n                ? movie.genres.map((genre) => {\n                    return (\n                      <Badge\n                        style={{ marginRight: \"20px\", marginLeft: \"10px\" }}\n                        variant=\"warning\"\n                      >\n                        {genre.name}\n                      </Badge>\n                    );\n                  })\n                : null}\n              <div className=\" text-white\">\n                {actors.map((actor) => {\n                  return <Badge style={{ marginLeft: \"10px\" }}>{actor}</Badge>;\n                })}\n              </div>\n            </div>\n          </Row>\n  \n          <Container className={\"mx-auto p-2\"}>\n            <ReactPlayer className={\"mx-auto\"} url={trailers[0]} />\n          </Container>\n          {/* {trailers.map((video, index) => {\n          return         <ReactPlayer key={`haha-${index}`} url={video} /> ;\n        })} */}\n        </Container>\n      </div>\n  );\n}\n","import React from \"react\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction Footer() {\n  return (\n    <footer className={\" text-light text-center bg-secondary\"}>\n      <small style={{ marginRight: \"20px\" }}>Developed by </small>\n      <a href=\"https://github.com/7ananDlshad\" style={{ color: \"white\" }}>\n        <FontAwesomeIcon icon={faGithub} />\n        <small style={{ marginRight: \"20px\" }}>Hanan</small>\n\n      </a>\n      <a href=\"https://github.com/QaysAyad\" style={{ color: \"white\" }}>\n        <FontAwesomeIcon icon={faGithub} />\n        <small style={{ marginRight: \"20px\" }}>Qays</small>\n\n      </a>\n      <a href=\"https://github.com/shirin-muataz\" style={{ color: \"white\" }}>\n        <FontAwesomeIcon icon={faGithub} />\n        <small style={{ marginRight: \"20px\" }}>Shirin</small>\n\n      </a>\n    </footer>\n  );\n}\nexport default Footer;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Navbar from \"./Components/Navbar\";\nimport MainPage from \"./Components/MainPage\";\nimport MoviePage from \"./Components/MoviePage\";\nimport Footer from \"./Components/Footer\";\nimport \"react-simple-flex-grid/lib/main.css\";\nimport {PATH_PREFIX} from './Components/Constants'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [query, setQuery] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n\n  const handleQuery = (query) => {\n    setQuery(query);\n  };\n\n  const handleMovies = (movies) => {\n    setMovies(movies);\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"page-container\">\n      <div className=\"content-wrap\">\n        <Navbar\n          handleQuery={handleQuery}\n          handleMovies={handleMovies}\n          isLoading={isLoading}\n          setIsLoading={setIsLoading}\n        />\n        <Router>\n          <Switch>\n            {/* <Route path=\"/iraq-bc-movies-project-students\">\n              <Redirect to=\"/\"></Redirect>\n            </Route> */}\n             <Route exact path={process.env.PUBLIC_URL +\"/\"}>\n              <MainPage\n                isLoading={isLoading}\n                setIsLoading={setIsLoading}\n                movies={movies}\n                query={query}\n              />\n            </Route>\n            <Route  path={process.env.PUBLIC_URL +\"/Movie/:id\"} component={MoviePage} />\n           \n          </Switch>\n        </Router>\n      </div>\n      <Footer />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}